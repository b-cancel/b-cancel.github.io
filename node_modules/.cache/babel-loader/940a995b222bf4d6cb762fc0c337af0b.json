{"ast":null,"code":"import _classCallCheck from\"/Users/bryancancel/Documents/sourceControl/b-cancel.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/bryancancel/Documents/sourceControl/b-cancel.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/bryancancel/Documents/sourceControl/b-cancel.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/bryancancel/Documents/sourceControl/b-cancel.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component,createRef}from\"react\";import Observer from\"@researchgate/react-intersection-observer\";import ReactFreezeframe from\"react-freezeframe\";import Stack from\"@mui/material/Stack\";//TODO: I should fix this so the GIFs also autoplay when they show while initially showing page\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var PlayGifWhenVisible=/*#__PURE__*/function(_Component){_inherits(PlayGifWhenVisible,_Component);var _super=_createSuper(PlayGifWhenVisible);function PlayGifWhenVisible(props){var _this;_classCallCheck(this,PlayGifWhenVisible);_this=_super.call(this,props);_this.state={visibility:null,threshold:0.01};_this.freeze=/*#__PURE__*/createRef();return _this;}_createClass(PlayGifWhenVisible,[{key:\"render\",value:function render(){var _this2=this;var identifier=this.props.identifier;var desiredThreshold=this.props.threshold;var stylingString=this.props.landscape?\"\":\"\\n      #\".concat(identifier,\", #\").concat(identifier,\" div, #\").concat(identifier,\" span {\\n        height:100%;\\n      }\\n\\n      #\").concat(identifier,\" img, #\").concat(identifier,\" canvas {\\n        height: 100%;\\n      }\\n\\n      #\").concat(identifier,\" img {\\n        object-fit: contain;\\n        object-position: left;\\n      }\\n    \");return/*#__PURE__*/_jsx(Observer,{onChange:function onChange(_ref){var isIntersecting=_ref.isIntersecting,intersectionRatio=_ref.intersectionRatio;if(isIntersecting){_this2.start();_this2.start();}else{_this2.stop();}},threshold:[desiredThreshold],children:/*#__PURE__*/_jsxs(Stack,{id:identifier,children:[/*#__PURE__*/_jsx(\"style\",{dangerouslySetInnerHTML:{__html:stylingString}}),/*#__PURE__*/_jsx(ReactFreezeframe,{src:this.props.src,ref:this.freeze,options:{trigger:false,overlay:false},onToggle:function onToggle(items,isPlaying){return _this2.logEvent(\"toggle\",items,isPlaying);},onStart:function onStart(items){return _this2.logEvent(\"start\",items);},onStop:function onStop(items){return _this2.logEvent(\"stop\",items);}},this.props.src)]})});}},{key:\"start\",value:function start(){this.freeze.current.start();}},{key:\"stop\",value:function stop(){this.freeze.current.stop();}},{key:\"toggle\",value:function toggle(){this.freeze.current.toggle();}},{key:\"logEvent\",value:function logEvent(event,items,isPlaying){//console.log(event, items, isPlaying);\n}}]);return PlayGifWhenVisible;}(Component);export{PlayGifWhenVisible as default};","map":{"version":3,"sources":["/Users/bryancancel/Documents/sourceControl/b-cancel.github.io/src/visible.js"],"names":["React","Component","createRef","Observer","ReactFreezeframe","Stack","PlayGifWhenVisible","props","state","visibility","threshold","freeze","identifier","desiredThreshold","stylingString","landscape","isIntersecting","intersectionRatio","start","stop","__html","src","trigger","overlay","items","isPlaying","logEvent","current","toggle","event"],"mappings":"gsBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,SAA3B,KAA4C,OAA5C,CACA,MAAOC,CAAAA,QAAP,KAAqB,2CAArB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,mBAA7B,CACA,MAAOC,CAAAA,KAAP,KAAkB,qBAAlB,CAEA;2FACqBC,CAAAA,kB,wHAMnB,4BAAYC,KAAZ,CAAmB,oDACjB,uBAAMA,KAAN,EADiB,MALnBC,KAKmB,CALX,CACNC,UAAU,CAAE,IADN,CAENC,SAAS,CAAE,IAFL,CAKW,CAEjB,MAAKC,MAAL,cAAcT,SAAS,EAAvB,CAFiB,aAGlB,C,qDAED,iBAAS,iBACP,GAAIU,CAAAA,UAAU,CAAG,KAAKL,KAAL,CAAWK,UAA5B,CACA,GAAMC,CAAAA,gBAAgB,CAAG,KAAKN,KAAL,CAAWG,SAApC,CACA,GAAMI,CAAAA,aAAa,CAAG,KAAKP,KAAL,CAAWQ,SAAX,uBAGjBH,UAHiB,eAGDA,UAHC,mBAGmBA,UAHnB,6DAOjBA,UAPiB,mBAOGA,UAPH,gEAWjBA,UAXiB,uFAAtB,CAgBA,mBACE,KAAC,QAAD,EACE,QAAQ,CAAE,uBAA2C,IAAxCI,CAAAA,cAAwC,MAAxCA,cAAwC,CAAxBC,iBAAwB,MAAxBA,iBAAwB,CACnD,GAAID,cAAJ,CAAoB,CAClB,MAAI,CAACE,KAAL,GACA,MAAI,CAACA,KAAL,GACD,CAHD,IAGO,CACL,MAAI,CAACC,IAAL,GACD,CACF,CARH,CASE,SAAS,CAAE,CAACN,gBAAD,CATb,uBAWE,MAAC,KAAD,EAAO,EAAE,CAAED,UAAX,wBACE,cACE,uBAAuB,CAAE,CACvBQ,MAAM,CAAEN,aADe,CAD3B,EADF,cAME,KAAC,gBAAD,EAEE,GAAG,CAAE,KAAKP,KAAL,CAAWc,GAFlB,CAGE,GAAG,CAAE,KAAKV,MAHZ,CAIE,OAAO,CAAE,CACPW,OAAO,CAAE,KADF,CAEPC,OAAO,CAAE,KAFF,CAJX,CAQE,QAAQ,CAAE,kBAACC,KAAD,CAAQC,SAAR,QACR,CAAA,MAAI,CAACC,QAAL,CAAc,QAAd,CAAwBF,KAAxB,CAA+BC,SAA/B,CADQ,EARZ,CAWE,OAAO,CAAE,iBAACD,KAAD,QAAW,CAAA,MAAI,CAACE,QAAL,CAAc,OAAd,CAAuBF,KAAvB,CAAX,EAXX,CAYE,MAAM,CAAE,gBAACA,KAAD,QAAW,CAAA,MAAI,CAACE,QAAL,CAAc,MAAd,CAAsBF,KAAtB,CAAX,EAZV,EACO,KAAKjB,KAAL,CAAWc,GADlB,CANF,GAXF,EADF,CAmCD,C,qBAED,gBAAQ,CACN,KAAKV,MAAL,CAAYgB,OAAZ,CAAoBT,KAApB,GACD,C,oBACD,eAAO,CACL,KAAKP,MAAL,CAAYgB,OAAZ,CAAoBR,IAApB,GACD,C,sBACD,iBAAS,CACP,KAAKR,MAAL,CAAYgB,OAAZ,CAAoBC,MAApB,GACD,C,wBACD,kBAASC,KAAT,CAAgBL,KAAhB,CAAuBC,SAAvB,CAAkC,CAChC;AACD,C,gCA9E6CxB,S,SAA3BK,kB","sourcesContent":["import React, { Component, createRef } from \"react\";\nimport Observer from \"@researchgate/react-intersection-observer\";\nimport ReactFreezeframe from \"react-freezeframe\";\nimport Stack from \"@mui/material/Stack\";\n\n//TODO: I should fix this so the GIFs also autoplay when they show while initially showing page\nexport default class PlayGifWhenVisible extends Component {\n  state = {\n    visibility: null,\n    threshold: 0.01,\n  };\n\n  constructor(props) {\n    super(props);\n    this.freeze = createRef();\n  }\n\n  render() {\n    var identifier = this.props.identifier;\n    const desiredThreshold = this.props.threshold;\n    const stylingString = this.props.landscape\n      ? ``\n      : `\n      #${identifier}, #${identifier} div, #${identifier} span {\n        height:100%;\n      }\n\n      #${identifier} img, #${identifier} canvas {\n        height: 100%;\n      }\n\n      #${identifier} img {\n        object-fit: contain;\n        object-position: left;\n      }\n    `;\n    return (\n      <Observer\n        onChange={({ isIntersecting, intersectionRatio }) => {\n          if (isIntersecting) {\n            this.start();\n            this.start();\n          } else {\n            this.stop();\n          }\n        }}\n        threshold={[desiredThreshold]}\n      >\n        <Stack id={identifier}>\n          <style\n            dangerouslySetInnerHTML={{\n              __html: stylingString,\n            }}\n          />\n          <ReactFreezeframe\n            key={this.props.src}\n            src={this.props.src}\n            ref={this.freeze}\n            options={{\n              trigger: false,\n              overlay: false,\n            }}\n            onToggle={(items, isPlaying) =>\n              this.logEvent(\"toggle\", items, isPlaying)\n            }\n            onStart={(items) => this.logEvent(\"start\", items)}\n            onStop={(items) => this.logEvent(\"stop\", items)}\n          />\n        </Stack>\n      </Observer>\n    );\n  }\n\n  start() {\n    this.freeze.current.start();\n  }\n  stop() {\n    this.freeze.current.stop();\n  }\n  toggle() {\n    this.freeze.current.toggle();\n  }\n  logEvent(event, items, isPlaying) {\n    //console.log(event, items, isPlaying);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}