{"ast":null,"code":"// Convert a string from kebab-case to camelCase\nvar camelCase = function camelCase(string) {\n  return string.replace(/\\-(\\w|$)/g, function (m, p1) {\n    return p1.toUpperCase();\n  });\n};\n\nvar convertPropertyName = function convertPropertyName(prop) {\n  prop = prop.toLowerCase(); // Always return 'float' as 'cssFloat'\n\n  if (prop === 'float') {\n    return 'cssFloat';\n  } // Skip CSS variables\n\n\n  if (prop.startsWith('--')) {\n    return prop;\n  } // Handle `-ms-` prefix to camelCase as msPropertyName, not MsPropertyName\n\n\n  if (prop.startsWith('-ms-')) {\n    prop = prop.substr(1);\n  }\n\n  return camelCase(prop);\n};\n\nvar splitDeclarations = function splitDeclarations(cssText) {\n  var declarations = [];\n  var capturing;\n  var i = cssText.length;\n  var last = i; // Split into declarations by semi-colon (outside quotes or parentheses)\n\n  while (i-- > -1) {\n    // Capture unescaped quotes\n    if ((cssText[i] === '\"' || cssText[i] === \"'\") && cssText[i - 1] !== '\\\\') {\n      if (!capturing) {\n        capturing = cssText[i];\n      } else if (cssText[i] === capturing) {\n        capturing = false;\n      }\n    } // Start capturing parentheses\n\n\n    if (!capturing && cssText[i] === ')') {\n      capturing = cssText[i];\n    } // Stop capturing parentheses\n\n\n    if (cssText[i] === '(' && capturing === ')') {\n      capturing = false;\n    } // Split at semi-colon\n\n\n    if (i < 0 || !capturing && cssText[i] === ';') {\n      declarations.unshift(cssText.slice(i + 1, last));\n      last = i;\n    }\n  }\n\n  return declarations;\n};\n\nvar splitDeclaration = function splitDeclaration(declaration) {\n  var i = declaration.indexOf(':');\n  return [declaration.substr(0, i).trim(), declaration.substr(i + 1).trim()];\n};\n\nvar cssToStyle = function cssToStyle(cssText) {\n  return splitDeclarations(cssText).map(splitDeclaration).filter(function (_ref) {\n    var name = _ref[0],\n        value = _ref[1];\n    return name && value;\n  }).reduce(function (styles, _ref2) {\n    var name = _ref2[0],\n        value = _ref2[1];\n    styles[convertPropertyName(name)] = value;\n    return styles;\n  }, {});\n};\n\nexport default cssToStyle;","map":{"version":3,"sources":["../src/index.js"],"names":["camelCase","p1","convertPropertyName","prop","splitDeclarations","declarations","i","cssText","last","capturing","splitDeclaration","declaration","cssToStyle","name","value","styles"],"mappings":"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","sourcesContent":["// Convert a string from kebab-case to camelCase\nconst camelCase = (string) =>\n  string.replace(/\\-(\\w|$)/g, (m, p1) => p1.toUpperCase());\n\nconst convertPropertyName = (prop) => {\n  prop = prop.toLowerCase();\n\n  // Always return 'float' as 'cssFloat'\n  if (prop === 'float') {\n    return 'cssFloat';\n  }\n\n  // Skip CSS variables\n  if (prop.startsWith('--')) {\n    return prop;\n  }\n\n  // Handle `-ms-` prefix to camelCase as msPropertyName, not MsPropertyName\n  if (prop.startsWith('-ms-')) {\n    prop = prop.substr(1);\n  }\n\n  return camelCase(prop);\n};\n\nconst splitDeclarations = (cssText) => {\n  const declarations = [];\n  let capturing;\n  let i = cssText.length;\n  let last = i;\n\n  // Split into declarations by semi-colon (outside quotes or parentheses)\n  while (i-- > -1) {\n    // Capture unescaped quotes\n    if ((cssText[i] === '\"' || cssText[i] === \"'\") && cssText[i - 1] !== '\\\\') {\n      if (!capturing) {\n        capturing = cssText[i];\n      } else if (cssText[i] === capturing) {\n        capturing = false;\n      }\n    }\n    // Start capturing parentheses\n    if (!capturing && cssText[i] === ')') {\n      capturing = cssText[i];\n    }\n    // Stop capturing parentheses\n    if (cssText[i] === '(' && capturing === ')') {\n      capturing = false;\n    }\n    // Split at semi-colon\n    if (i < 0 || (!capturing && cssText[i] === ';')) {\n      declarations.unshift(cssText.slice(i + 1, last));\n      last = i;\n    }\n  }\n\n  return declarations;\n};\n\nconst splitDeclaration = (declaration) => {\n  const i = declaration.indexOf(':');\n  return [declaration.substr(0, i).trim(), declaration.substr(i + 1).trim()];\n};\n\nconst cssToStyle = (cssText) =>\n  splitDeclarations(cssText)\n    .map(splitDeclaration)\n    .filter(([name, value]) => name && value)\n    .reduce((styles, [name, value]) => {\n      styles[convertPropertyName(name)] = value;\n      return styles;\n    }, {});\n\nexport default cssToStyle;\n"]},"metadata":{},"sourceType":"module"}