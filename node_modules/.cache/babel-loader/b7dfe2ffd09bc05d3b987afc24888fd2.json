{"ast":null,"code":"var _jsxFileName = \"/Users/bryancancel/Documents/sourceControl/b-cancel.github.io/react/portfolio/src/index.js\";\n\n/*\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles.css\";\n\n\nfunction App() {\n  function onMenuOpen(){\n    window.onMenuOpened();\n  }\n\n  return (\n    <div id=\"outer-container\">\n      <SideBar pageWrapId={\"page-wrap\"}/>\n      <div id=\"page-wrap\">\n        <Gallery/>\n      </div>\n    </div>\n  );\n}\n*/\n//<Menu isOpen={ true } />\n//<Menu width={ '280px' } />\n//<Menu onClose={ handleOnClose } />\n//<Menu onOpen={ handleOnOpen } />\n//TODO: trigger the variable change... then use\n\n/*\nNote: If you want to render the menu open initially, \nyou will need to set this property in your parent component's componentDidMount() function.\nhttps://github.com/negomi/react-burger-menu/wiki/FAQ#i-want-to-control-the-open-state-programmatically-but-i-dont-understand-how-to-use-the-isopen-prop\n*/\nimport React, { useState, useContext } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { slide as Menu } from \"react-burger-menu\";\nimport SideBar from \"./sidebar\";\nimport Gallery from \"./gallery.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  render() {\n    const gallery = /*#__PURE__*/_jsxDEV(Gallery, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(ReloadingApp, {\n      child: gallery\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass ReloadingApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      menuOpen: false\n    };\n  } // This keeps your state in sync with the opening/closing of the menu\n  // via the default means, e.g. clicking the X, pressing the ESC key etc.\n\n\n  handleStateChange(state) {\n    this.setState({\n      menuOpen: state.isOpen\n    });\n  } // This can be used to close the menu, e.g. when a user clicks a menu item\n\n\n  closeMenu() {\n    this.setState({\n      menuOpen: false\n    });\n  } // This can be used to toggle the menu, e.g. when using a custom icon\n  // Tip: You probably want to hide either/both default icons if using a custom icon\n  // See https://github.com/negomi/react-burger-menu#custom-icons\n\n\n  toggleMenu() {\n    this.setState(state => ({\n      menuOpen: !state.menuOpen\n    }));\n  } // so that we can open the menu on start up\n\n\n  componentDidMount() {\n    // we wait atleast 200 ms so it's noticible that the menu opened on start up\n    setTimeout(() => {\n      if (this.state.menuOpen === false) {\n        this.toggleMenu();\n      }\n    }, 200);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"outer-container\",\n      children: [/*#__PURE__*/_jsxDEV(SideBar, {\n        pageWrapId: \"page-wrap\",\n        isOpen: this.state.menuOpen,\n        onStateChange: state => this.handleStateChange(state)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"page-wrap\",\n        children: this.props.child\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 1\n    }, this);\n  }\n\n}\n/*\n// make a new context\nconst MyContext = React.createContext();\n\n// create the provider\nconst MyProvider = (props) => {\n  const [menuOpenState, setMenuOpenState] = useState(false);\n\n  return (\n    <MyContext.Provider\n      value={{\n        isMenuOpen: menuOpenState,\n        toggleMenu: () => setMenuOpenState(!menuOpenState),\n        stateChangeHandler: (newState) => setMenuOpenState(newState.isOpen),\n      }}\n    >\n      {props.children}\n    </MyContext.Provider>\n  );\n};\n\n// create a navigation component that wraps the burger menu\nconst Navigation = () => {\n  const ctx = useContext(MyContext);\n\n  return (\n    <SideBar\n      pageWrapId={\"page-wrap\"}\n      isOpen={ctx.isMenuOpen}\n      onStateChange={(state) => ctx.stateChangeHandler(state)}\n    />\n  );\n};\n\n// default export here\nclass App extends React.Component {\n  \n  \n\n  render () {\n    const context = useContext(MyContext);\n    return (\n      <MyProvider>\n        <div id=\"outer-container\">\n          <Navigation />\n          <div id=\"page-wrap\">\n            <Gallery />\n          </div>\n        </div>\n      </MyProvider>\n    );\n  };\n}\n*/\n\n\nconst rootElement = document.getElementById(\"app\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 161,\n  columnNumber: 17\n}, this), rootElement);","map":{"version":3,"sources":["/Users/bryancancel/Documents/sourceControl/b-cancel.github.io/react/portfolio/src/index.js"],"names":["React","useState","useContext","ReactDOM","slide","Menu","SideBar","Gallery","App","Component","render","gallery","ReloadingApp","constructor","props","state","menuOpen","handleStateChange","setState","isOpen","closeMenu","toggleMenu","componentDidMount","setTimeout","child","rootElement","document","getElementById"],"mappings":"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","sourcesContent":["/*\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles.css\";\n\n\nfunction App() {\n  function onMenuOpen(){\n    window.onMenuOpened();\n  }\n\n  return (\n    <div id=\"outer-container\">\n      <SideBar pageWrapId={\"page-wrap\"}/>\n      <div id=\"page-wrap\">\n        <Gallery/>\n      </div>\n    </div>\n  );\n}\n*/\n\n//<Menu isOpen={ true } />\n//<Menu width={ '280px' } />\n//<Menu onClose={ handleOnClose } />\n//<Menu onOpen={ handleOnOpen } />\n\n//TODO: trigger the variable change... then use\n/*\nNote: If you want to render the menu open initially, \nyou will need to set this property in your parent component's componentDidMount() function.\nhttps://github.com/negomi/react-burger-menu/wiki/FAQ#i-want-to-control-the-open-state-programmatically-but-i-dont-understand-how-to-use-the-isopen-prop\n*/\n\nimport React, { useState, useContext } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { slide as Menu } from \"react-burger-menu\";\nimport SideBar from \"./sidebar\";\nimport Gallery from \"./gallery.js\"\n\nclass App extends React.Component {\n  render () {\n    const gallery = <Gallery />;\n    return (\n      <ReloadingApp child={gallery}/>\n    );\n  }\n}\n\nclass ReloadingApp extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      menuOpen: false\n    }\n  }\n\n  // This keeps your state in sync with the opening/closing of the menu\n  // via the default means, e.g. clicking the X, pressing the ESC key etc.\n  handleStateChange (state) {\n    this.setState({menuOpen: state.isOpen})  \n  }\n  \n  // This can be used to close the menu, e.g. when a user clicks a menu item\n  closeMenu () {\n    this.setState({menuOpen: false})\n  }\n\n  // This can be used to toggle the menu, e.g. when using a custom icon\n  // Tip: You probably want to hide either/both default icons if using a custom icon\n  // See https://github.com/negomi/react-burger-menu#custom-icons\n  toggleMenu () {\n    this.setState(state => ({menuOpen: !state.menuOpen}))\n  }\n\n  // so that we can open the menu on start up\n  componentDidMount(){\n    // we wait atleast 200 ms so it's noticible that the menu opened on start up\n    setTimeout(() => {\n      if(this.state.menuOpen === false){\n        this.toggleMenu();\n      }\n    }, 200);\n  }\n\n  render () {\n    return (\n\n<div id=\"outer-container\">\n<SideBar\n      pageWrapId={\"page-wrap\"}\n      isOpen={this.state.menuOpen}\n          onStateChange={(state) => this.handleStateChange(state)}\n    />\n<div id=\"page-wrap\">\n  {this.props.child}\n</div>\n</div>\n    )\n  }\n}\n\n/*\n// make a new context\nconst MyContext = React.createContext();\n\n// create the provider\nconst MyProvider = (props) => {\n  const [menuOpenState, setMenuOpenState] = useState(false);\n\n  return (\n    <MyContext.Provider\n      value={{\n        isMenuOpen: menuOpenState,\n        toggleMenu: () => setMenuOpenState(!menuOpenState),\n        stateChangeHandler: (newState) => setMenuOpenState(newState.isOpen),\n      }}\n    >\n      {props.children}\n    </MyContext.Provider>\n  );\n};\n\n// create a navigation component that wraps the burger menu\nconst Navigation = () => {\n  const ctx = useContext(MyContext);\n\n  return (\n    <SideBar\n      pageWrapId={\"page-wrap\"}\n      isOpen={ctx.isMenuOpen}\n      onStateChange={(state) => ctx.stateChangeHandler(state)}\n    />\n  );\n};\n\n// default export here\nclass App extends React.Component {\n  \n  \n\n  render () {\n    const context = useContext(MyContext);\n    return (\n      <MyProvider>\n        <div id=\"outer-container\">\n          <Navigation />\n          <div id=\"page-wrap\">\n            <Gallery />\n          </div>\n        </div>\n      </MyProvider>\n    );\n  };\n}\n*/\n\n\nconst rootElement = document.getElementById(\"app\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}