{"ast":null,"code":"var _jsxFileName = \"/Users/bryancancel/Documents/sourceControl/b-cancel.github.io/react/portfolio/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SideBar from \"./sidebar\";\nimport Gallery from \"./gallery.js\";\nimport { faTags } from \"@fortawesome/free-solid-svg-icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.childRef = /*#__PURE__*/React.createRef();\n  } //now that everything is loaded...\n\n\n  componentDidMount() {\n    console.log(\"App mounted\"); //wait a bit and attempt to open the menu\n    //200ms works reliably... anything less does not\n\n    this.childRef.current.openMenu();\n    setTimeout(() => {//      this.childRef.current.openMenu();\n    }, 10);\n  }\n\n  render() {\n    const gallery = /*#__PURE__*/_jsxDEV(Gallery, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 21\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(ReloadingApp, {\n      child: gallery,\n      ref: this.childRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nclass ReloadingApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      menuOpen: false\n    };\n  } // This keeps your state in sync with the opening/closing of the menu\n  // via the default means, e.g. clicking the X, pressing the ESC key etc.\n\n\n  handleStateChange(state) {\n    console.log(\"STATE CHANGED TO: \" + state.isOpen);\n    this.setState({\n      menuOpen: state.isOpen\n    });\n  } // This can be used to close the menu, e.g. when a user clicks a menu item\n\n\n  closeMenu() {\n    console.log(\"TRYING TO CLOSE MENU\");\n    this.setState({\n      menuOpen: false\n    });\n  }\n\n  openMenu() {\n    console.log(\"TRYING TO OPEN MENU\");\n    this.setState({\n      menuOpen: true\n    });\n  } //<Menu isOpen={ true } />\n  //<Menu width={ '280px' } />\n  //<Menu onClose={ handleOnClose } />\n  //<Menu onOpen={ handleOnOpen } />\n  // This can be used to toggle the menu, e.g. when using a custom icon\n  // Tip: You probably want to hide either/both default icons if using a custom icon\n  // See https://github.com/negomi/react-burger-menu#custom-icons\n\n\n  toggleMenu() {\n    this.setState(state => ({\n      menuOpen: !state.menuOpen\n    }));\n  }\n\n  render() {\n    //#page-wrap styling when open (nothing when closed)\n    //OPEN: transform: translate3d(300px, 0px, 0px); \n    //CLOSE: \n    //.bm-menu-wrap styling when open \n    //OPEN: display: block\n    //CLOSE: display:none && transform: translate3d(-100%, 0px, 0px);\n    //.bm-overlay\n    //OPEN: opacity: 1; \n    //CLOSE: opacity: 0;\n    //html and body tags\n    //OPEN: overflow-x: hidden;\n    //CLOSE: overflow-x: auto;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"outer-container\",\n      children: [/*#__PURE__*/_jsxDEV(SideBar, {\n        pageWrapId: \"page-wrap\",\n        isOpen: this.state.menuOpen,\n        onStateChange: state => this.handleStateChange(state)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"page-wrap\",\n        children: this.props.child\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst rootElement = document.getElementById(\"app\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 100,\n  columnNumber: 17\n}, this), rootElement);","map":{"version":3,"sources":["/Users/bryancancel/Documents/sourceControl/b-cancel.github.io/react/portfolio/src/index.js"],"names":["React","ReactDOM","SideBar","Gallery","faTags","App","Component","constructor","props","childRef","createRef","componentDidMount","console","log","current","openMenu","setTimeout","render","gallery","ReloadingApp","state","menuOpen","handleStateChange","isOpen","setState","closeMenu","toggleMenu","child","rootElement","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,SAASC,MAAT,QAAuB,mCAAvB;;;AAEA,MAAMC,GAAN,SAAkBL,KAAK,CAACM,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,QAAL,gBAAgBT,KAAK,CAACU,SAAN,EAAhB;AACD,GAJ+B,CAMhC;;;AACAC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EADkB,CAElB;AACA;;AACA,SAAKJ,QAAL,CAAcK,OAAd,CAAsBC,QAAtB;AAEAC,IAAAA,UAAU,CAAC,MAAM,CACrB;AACK,KAFS,EAEP,EAFO,CAAV;AAGD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAMC,OAAO,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAhB;;AACA,wBAAO,QAAC,YAAD;AAAc,MAAA,KAAK,EAAEA,OAArB;AAA8B,MAAA,GAAG,EAAE,KAAKT;AAAxC;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AArB+B;;AAwBlC,MAAMU,YAAN,SAA2BnB,KAAK,CAACM,SAAjC,CAA2C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKY,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE;AADC,KAAb;AAGD,GANwC,CAQzC;AACA;;;AACAC,EAAAA,iBAAiB,CAACF,KAAD,EAAQ;AACvBR,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBO,KAAK,CAACG,MAAzC;AACA,SAAKC,QAAL,CAAc;AAAEH,MAAAA,QAAQ,EAAED,KAAK,CAACG;AAAlB,KAAd;AACD,GAbwC,CAezC;;;AACAE,EAAAA,SAAS,GAAG;AACVb,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,SAAKW,QAAL,CAAc;AAAEH,MAAAA,QAAQ,EAAE;AAAZ,KAAd;AACD;;AAEDN,EAAAA,QAAQ,GAAG;AACTH,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,SAAKW,QAAL,CAAc;AAAEH,MAAAA,QAAQ,EAAE;AAAZ,KAAd;AACD,GAxBwC,CA0BzC;AACA;AACA;AACA;AAEA;AACA;AACA;;;AACAK,EAAAA,UAAU,GAAG;AACX,SAAKF,QAAL,CAAeJ,KAAD,KAAY;AAAEC,MAAAA,QAAQ,EAAE,CAACD,KAAK,CAACC;AAAnB,KAAZ,CAAd;AACD;;AAEDJ,EAAAA,MAAM,GAAG;AACP;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA,wBACE;AAAK,MAAA,EAAE,EAAC,iBAAR;AAAA,8BACE,QAAC,OAAD;AACE,QAAA,UAAU,EAAE,WADd;AAEE,QAAA,MAAM,EAAE,KAAKG,KAAL,CAAWC,QAFrB;AAGE,QAAA,aAAa,EAAGD,KAAD,IAAW,KAAKE,iBAAL,CAAuBF,KAAvB;AAH5B;AAAA;AAAA;AAAA;AAAA,cADF,eAME;AAAK,QAAA,EAAE,EAAC,WAAR;AAAA,kBAAqB,KAAKZ,KAAL,CAAWmB;AAAhC;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AAjEwC;;AAoE3C,MAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAApB;AACA7B,QAAQ,CAACgB,MAAT,eAAgB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAAyBW,WAAzB","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SideBar from \"./sidebar\";\nimport Gallery from \"./gallery.js\";\nimport { faTags } from \"@fortawesome/free-solid-svg-icons\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.childRef = React.createRef();\n  }\n\n  //now that everything is loaded...\n  componentDidMount() {\n    console.log(\"App mounted\");\n    //wait a bit and attempt to open the menu\n    //200ms works reliably... anything less does not\n    this.childRef.current.openMenu();\n    \n    setTimeout(() => {\n//      this.childRef.current.openMenu();\n    }, 10);\n  }\n\n  render() {\n    const gallery = <Gallery />;\n    return <ReloadingApp child={gallery} ref={this.childRef} />;\n  }\n}\n\nclass ReloadingApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      menuOpen: false,\n    };\n  }\n\n  // This keeps your state in sync with the opening/closing of the menu\n  // via the default means, e.g. clicking the X, pressing the ESC key etc.\n  handleStateChange(state) {\n    console.log(\"STATE CHANGED TO: \" + state.isOpen);\n    this.setState({ menuOpen: state.isOpen });\n  }\n\n  // This can be used to close the menu, e.g. when a user clicks a menu item\n  closeMenu() {\n    console.log(\"TRYING TO CLOSE MENU\");\n    this.setState({ menuOpen: false });\n  }\n\n  openMenu() {\n    console.log(\"TRYING TO OPEN MENU\");\n    this.setState({ menuOpen: true });\n  }\n\n  //<Menu isOpen={ true } />\n  //<Menu width={ '280px' } />\n  //<Menu onClose={ handleOnClose } />\n  //<Menu onOpen={ handleOnOpen } />\n\n  // This can be used to toggle the menu, e.g. when using a custom icon\n  // Tip: You probably want to hide either/both default icons if using a custom icon\n  // See https://github.com/negomi/react-burger-menu#custom-icons\n  toggleMenu() {\n    this.setState((state) => ({ menuOpen: !state.menuOpen }));\n  }\n\n  render() {\n    //#page-wrap styling when open (nothing when closed)\n    //OPEN: transform: translate3d(300px, 0px, 0px); \n    //CLOSE: \n\n    //.bm-menu-wrap styling when open \n    //OPEN: display: block\n    //CLOSE: display:none && transform: translate3d(-100%, 0px, 0px);\n\n    //.bm-overlay\n    //OPEN: opacity: 1; \n    //CLOSE: opacity: 0;\n\n    //html and body tags\n    //OPEN: overflow-x: hidden;\n    //CLOSE: overflow-x: auto;\n\n    return (\n      <div id=\"outer-container\">\n        <SideBar\n          pageWrapId={\"page-wrap\"}\n          isOpen={this.state.menuOpen}\n          onStateChange={(state) => this.handleStateChange(state)}\n        />\n        <div id=\"page-wrap\">{this.props.child}</div>\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"app\");\nReactDOM.render(<App />, rootElement);"]},"metadata":{},"sourceType":"module"}