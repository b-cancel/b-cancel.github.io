{"ast":null,"code":"var _jsxFileName = \"/Users/bryancancel/Documents/sourceControl/b-cancel.github.io/react/portfolio/src/visible.js\";\nimport React, { Component, createRef } from 'react';\nimport Observer from '@researchgate/react-intersection-observer';\nimport ReactFreezeframe from 'react-freezeframe';\nimport Box from \"@mui/material/Box\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getPrintableThreshold = (ratio, range) => range.reduce((prev, curr) => Math.abs(curr - ratio) < Math.abs(prev - ratio) ? curr : prev); //TODO: I should fix this so the GIFs also autoplay when they show while initially showing page\n\n\nexport default class PlayGifWhenVisible extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visibility: null,\n      threshold: 0.01\n    };\n    this.freeze = /*#__PURE__*/createRef();\n  }\n\n  render() {\n    const identifier = this.props.src;\n    const desiredThreshold = this.props.threshold;\n    const stylingString = this.props.landscape ? `` : `\n\n    `;\n\n    const portraitStyling = /*#__PURE__*/_jsxDEV(\"style\", {\n      dangerouslySetInnerHTML: {\n        __html: {\n          stylingString\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 29\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(Observer, {\n      onChange: ({\n        isIntersecting,\n        intersectionRatio\n      }) => {\n        if (isIntersecting) {\n          console.log(\"VISIBLE\");\n          this.start();\n          this.start();\n        } else {\n          console.log(\"HIDDEN\");\n          this.stop();\n        } //unsure if this is required\n\n        /*\n        this.setState({\n          visibility: isIntersecting ? true : false,\n          threshold: getPrintableThreshold(\n            intersectionRatio.toFixed(2),\n            [desiredThreshold],\n          ),\n        });\n        */\n\n      },\n      threshold: [desiredThreshold],\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: identifier,\n        children: /*#__PURE__*/_jsxDEV(ReactFreezeframe, {\n          src: this.props.src,\n          ref: this.freeze,\n          options: {\n            trigger: false,\n            overlay: false\n          },\n          onToggle: (items, isPlaying) => this.logEvent('toggle', items, isPlaying),\n          onStart: items => this.logEvent('start', items),\n          onStop: items => this.logEvent('stop', items)\n        }, this.props.src, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this);\n  }\n\n  start() {\n    console.log(\"START\");\n    this.freeze.current.start();\n  }\n\n  stop() {\n    console.log(\"STOP\");\n    this.freeze.current.stop();\n  }\n\n  toggle() {\n    this.freeze.current.toggle();\n  }\n\n  logEvent(event, items, isPlaying) {\n    console.log(event, items, isPlaying);\n  }\n\n}","map":{"version":3,"sources":["/Users/bryancancel/Documents/sourceControl/b-cancel.github.io/react/portfolio/src/visible.js"],"names":["React","Component","createRef","Observer","ReactFreezeframe","Box","getPrintableThreshold","ratio","range","reduce","prev","curr","Math","abs","PlayGifWhenVisible","constructor","props","state","visibility","threshold","freeze","render","identifier","src","desiredThreshold","stylingString","landscape","portraitStyling","__html","isIntersecting","intersectionRatio","console","log","start","stop","trigger","overlay","items","isPlaying","logEvent","current","toggle","event"],"mappings":"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","sourcesContent":["import React, { Component, createRef } from 'react';\nimport Observer from '@researchgate/react-intersection-observer';\nimport ReactFreezeframe from 'react-freezeframe';\nimport Box from \"@mui/material/Box\";\n\nconst getPrintableThreshold = (ratio, range) =>\n  range.reduce((prev, curr) =>\n    Math.abs(curr - ratio) < Math.abs(prev - ratio) ? curr : prev);\n\n//TODO: I should fix this so the GIFs also autoplay when they show while initially showing page\nexport default class PlayGifWhenVisible extends Component {\n  state = {\n    visibility: null,\n    threshold: 0.01,\n  };\n\n  constructor(props) {\n    super(props);\n    this.freeze = createRef();\n  }\n\n  render() {\n    const identifier = this.props.src;\n    const desiredThreshold = this.props.threshold;\n    const stylingString = this.props.landscape ? `` : `\n\n    `;\n    const portraitStyling = <style\n      dangerouslySetInnerHTML={{\n        __html: {stylingString},\n      }}\n    />\n    return (\n        \n        <Observer\n        onChange={({ isIntersecting, intersectionRatio }) => {\n          if(isIntersecting){\n            console.log(\"VISIBLE\");\n            this.start();\n            this.start();\n          } else {\n            console.log(\"HIDDEN\");\n            this.stop();\n          }\n\n          //unsure if this is required\n          /*\n          this.setState({\n            visibility: isIntersecting ? true : false,\n            threshold: getPrintableThreshold(\n              intersectionRatio.toFixed(2),\n              [desiredThreshold],\n            ),\n          });\n          */\n        }}\n        threshold={[desiredThreshold]}\n      >\n        <span id={identifier}>\n        <ReactFreezeframe\n          key={this.props.src}\n          src={this.props.src}\n          ref={this.freeze}\n          options={{\n            trigger: false,\n            overlay: false,\n          }}\n          onToggle={(items, isPlaying) => this.logEvent('toggle', items, isPlaying)}\n          onStart={(items) => this.logEvent('start', items)}\n          onStop={(items) => this.logEvent('stop', items)}\n        />\n        </span>\n      </Observer>\n    );\n  }\n\n  start() {\n    console.log(\"START\");\n    this.freeze.current.start();\n  }\n  stop() {\n    console.log(\"STOP\");\n    this.freeze.current.stop();\n  }\n  toggle() {\n    this.freeze.current.toggle();\n  }\n  logEvent(event, items, isPlaying) {\n    console.log(event, items, isPlaying);\n  }\n}"]},"metadata":{},"sourceType":"module"}