{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { isMobile } from \"react-device-detect\";\nvar oldWindowDimensions;\n\nfunction getWindowDimensions() {\n  const {\n    innerWidth: width,\n    innerHeight: height\n  } = window;\n  oldWindowDimensions = {\n    width,\n    height\n  };\n  return oldWindowDimensions;\n}\n\nexport default function useWindowDimensions() {\n  _s();\n\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n  useEffect(() => {\n    function handleResize() {\n      const oldWindowSize = oldWindowDimensions;\n      const currWindowSize = getWindowDimensions(); //it seems like this should allways be TRUE\n      //but it isn't\n      //and not checking this first affects performance\n      //and the behavior on mobile explained below\n\n      const sameDimensions = oldWindowSize.height === currWindowSize.height && oldWindowSize.width === currWindowSize.width; //we don't need to pass set our dimensions if they haven't change on DESKTOP\n\n      if (isMobile === false && sameDimensions === false) {\n        setWindowDimensions(currWindowSize);\n      } else {\n        //when we are on mobile...\n        //its possible some features are appearing and disapearing dynamically...\n        //but we don't want those to change the size of the elements that rely on height and width...\n        //so we simply keep our dimmensions on mobile UNLESS an orientation change occurs\n        const oldPortrait = oldWindowSize.height > oldWindowSize.width;\n        const currPortait = currWindowSize.height > currWindowSize.width;\n        const orientationChange = oldPortrait !== currPortait; //TODO: I suspect that regardless of whether or not the orientation changes...\n        //we can set window dimensions by simply copying our last height into our currWindowSize\n        //but I'm unsure so I'll hold off\n\n        if (orientationChange || sameDimensions) {\n          setWindowDimensions(currWindowSize);\n        }\n      }\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  return windowDimensions;\n}\n\n_s(useWindowDimensions, \"XalQq70mIWrnM+6Jr3XornfayDc=\");","map":{"version":3,"sources":["/Users/bryancancel/Documents/sourceControl/b-cancel.github.io/react/portfolio/src/window.js"],"names":["useState","useEffect","isMobile","oldWindowDimensions","getWindowDimensions","innerWidth","width","innerHeight","height","window","useWindowDimensions","windowDimensions","setWindowDimensions","handleResize","oldWindowSize","currWindowSize","sameDimensions","oldPortrait","currPortait","orientationChange","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,IAAIC,mBAAJ;;AAEA,SAASC,mBAAT,GAA+B;AAC7B,QAAM;AAAEC,IAAAA,UAAU,EAAEC,KAAd;AAAqBC,IAAAA,WAAW,EAAEC;AAAlC,MAA6CC,MAAnD;AACAN,EAAAA,mBAAmB,GAAG;AACpBG,IAAAA,KADoB;AAEpBE,IAAAA;AAFoB,GAAtB;AAIA,SAAOL,mBAAP;AACD;;AAED,eAAe,SAASO,mBAAT,GAA+B;AAAA;;AAC5C,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CZ,QAAQ,CACtDI,mBAAmB,EADmC,CAAxD;AAIAH,EAAAA,SAAS,CAAC,MAAM;AACd,aAASY,YAAT,GAAwB;AACtB,YAAMC,aAAa,GAAGX,mBAAtB;AACA,YAAMY,cAAc,GAAGX,mBAAmB,EAA1C,CAFsB,CAItB;AACA;AACA;AACA;;AACA,YAAMY,cAAc,GAClBF,aAAa,CAACN,MAAd,KAAyBO,cAAc,CAACP,MAAxC,IACAM,aAAa,CAACR,KAAd,KAAwBS,cAAc,CAACT,KAFzC,CARsB,CAYtB;;AACA,UAAIJ,QAAQ,KAAK,KAAb,IAAsBc,cAAc,KAAK,KAA7C,EAAoD;AAClDJ,QAAAA,mBAAmB,CAACG,cAAD,CAAnB;AACD,OAFD,MAEO;AACL;AACA;AACA;AACA;AACA,cAAME,WAAW,GAAGH,aAAa,CAACN,MAAd,GAAuBM,aAAa,CAACR,KAAzD;AACA,cAAMY,WAAW,GAAGH,cAAc,CAACP,MAAf,GAAwBO,cAAc,CAACT,KAA3D;AACA,cAAMa,iBAAiB,GAAGF,WAAW,KAAKC,WAA1C,CAPK,CASL;AACA;AACA;;AACA,YAAIC,iBAAiB,IAAIH,cAAzB,EAAyC;AACvCJ,UAAAA,mBAAmB,CAACG,cAAD,CAAnB;AACD;AACF;AACF;;AAEDN,IAAAA,MAAM,CAACW,gBAAP,CAAwB,QAAxB,EAAkCP,YAAlC;AACA,WAAO,MAAMJ,MAAM,CAACY,mBAAP,CAA2B,QAA3B,EAAqCR,YAArC,CAAb;AACD,GApCQ,EAoCN,EApCM,CAAT;AAsCA,SAAOF,gBAAP;AACD;;GA5CuBD,mB","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { isMobile } from \"react-device-detect\";\n\nvar oldWindowDimensions;\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  oldWindowDimensions = {\n    width,\n    height,\n  };\n  return oldWindowDimensions;\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  useEffect(() => {\n    function handleResize() {\n      const oldWindowSize = oldWindowDimensions;\n      const currWindowSize = getWindowDimensions();\n\n      //it seems like this should allways be TRUE\n      //but it isn't\n      //and not checking this first affects performance\n      //and the behavior on mobile explained below\n      const sameDimensions =\n        oldWindowSize.height === currWindowSize.height &&\n        oldWindowSize.width === currWindowSize.width;\n\n      //we don't need to pass set our dimensions if they haven't change on DESKTOP\n      if (isMobile === false && sameDimensions === false) {\n        setWindowDimensions(currWindowSize);\n      } else {\n        //when we are on mobile...\n        //its possible some features are appearing and disapearing dynamically...\n        //but we don't want those to change the size of the elements that rely on height and width...\n        //so we simply keep our dimmensions on mobile UNLESS an orientation change occurs\n        const oldPortrait = oldWindowSize.height > oldWindowSize.width;\n        const currPortait = currWindowSize.height > currWindowSize.width;\n        const orientationChange = oldPortrait !== currPortait;\n\n        //TODO: I suspect that regardless of whether or not the orientation changes...\n        //we can set window dimensions by simply copying our last height into our currWindowSize\n        //but I'm unsure so I'll hold off\n        if (orientationChange || sameDimensions) {\n          setWindowDimensions(currWindowSize);\n        }\n      }\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n"]},"metadata":{},"sourceType":"module"}