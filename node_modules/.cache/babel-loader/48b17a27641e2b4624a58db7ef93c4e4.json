{"ast":null,"code":"var _jsxFileName = \"/Users/bryancancel/Documents/sourceControl/b-cancel.github.io/react/portfolio/src/visible.js\";\nimport React, { Component, createRef } from 'react';\nimport Observer from '@researchgate/react-intersection-observer';\nimport ReactFreezeframe from 'react-freezeframe';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getPrintableThreshold = (ratio, range) => range.reduce((prev, curr) => Math.abs(curr - ratio) < Math.abs(prev - ratio) ? curr : prev);\n\nexport default class PlayGifWhenVisible extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visibility: null,\n      threshold: 0\n    };\n    this.freeze = /*#__PURE__*/createRef();\n  }\n\n  render() {\n    const desiredThreshold = this.props.threshold;\n    return /*#__PURE__*/_jsxDEV(Observer, {\n      onChange: ({\n        isIntersecting,\n        intersectionRatio\n      }) => {\n        if (isIntersecting) {\n          if (this.freeze.current.isPlaying === false) {\n            this.start();\n          }\n        } else {\n          if (this.freeze.current.isPlaying) {\n            this.stop();\n          }\n        } //unsure if this is required\n\n\n        this.setState({\n          visibility: isIntersecting ? true : false,\n          threshold: getPrintableThreshold(intersectionRatio.toFixed(2), [desiredThreshold])\n        });\n      },\n      threshold: [desiredThreshold],\n      children: /*#__PURE__*/_jsxDEV(ReactFreezeframe, {\n        src: this.props.src,\n        ref: this.freeze,\n        options: {\n          trigger: false,\n          overlay: true\n        },\n        onToggle: (items, isPlaying) => this.logEvent('toggle', items, isPlaying),\n        onStart: items => this.logEvent('start', items),\n        onStop: items => this.logEvent('stop', items)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this);\n  }\n\n  start() {\n    this.freeze.current.start();\n  }\n\n  stop() {\n    this.freeze.current.stop();\n  }\n\n  toggle() {\n    this.freeze.current.toggle();\n  }\n\n  logEvent(event, items, isPlaying) {\n    console.log(event, items, isPlaying);\n  }\n\n}","map":{"version":3,"sources":["/Users/bryancancel/Documents/sourceControl/b-cancel.github.io/react/portfolio/src/visible.js"],"names":["React","Component","createRef","Observer","ReactFreezeframe","getPrintableThreshold","ratio","range","reduce","prev","curr","Math","abs","PlayGifWhenVisible","constructor","props","state","visibility","threshold","freeze","render","desiredThreshold","isIntersecting","intersectionRatio","current","isPlaying","start","stop","setState","toFixed","src","trigger","overlay","items","logEvent","toggle","event","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,OAAOC,QAAP,MAAqB,2CAArB;AACA,OAAOC,gBAAP,MAA6B,mBAA7B;;;AAEA,MAAMC,qBAAqB,GAAG,CAACC,KAAD,EAAQC,KAAR,KAC5BA,KAAK,CAACC,MAAN,CAAa,CAACC,IAAD,EAAOC,IAAP,KACXC,IAAI,CAACC,GAAL,CAASF,IAAI,GAAGJ,KAAhB,IAAyBK,IAAI,CAACC,GAAL,CAASH,IAAI,GAAGH,KAAhB,CAAzB,GAAkDI,IAAlD,GAAyDD,IAD3D,CADF;;AAIA,eAAe,MAAMI,kBAAN,SAAiCZ,SAAjC,CAA2C;AAMxDa,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SALnBC,KAKmB,GALX;AACNC,MAAAA,UAAU,EAAE,IADN;AAENC,MAAAA,SAAS,EAAE;AAFL,KAKW;AAEjB,SAAKC,MAAL,gBAAcjB,SAAS,EAAvB;AACD;;AAEDkB,EAAAA,MAAM,GAAG;AACP,UAAMC,gBAAgB,GAAG,KAAKN,KAAL,CAAWG,SAApC;AACA,wBACI,QAAC,QAAD;AACA,MAAA,QAAQ,EAAE,CAAC;AAAEI,QAAAA,cAAF;AAAkBC,QAAAA;AAAlB,OAAD,KAA2C;AACnD,YAAGD,cAAH,EAAkB;AAChB,cAAG,KAAKH,MAAL,CAAYK,OAAZ,CAAoBC,SAApB,KAAkC,KAArC,EAA2C;AACzC,iBAAKC,KAAL;AACD;AACF,SAJD,MAIO;AACL,cAAG,KAAKP,MAAL,CAAYK,OAAZ,CAAoBC,SAAvB,EAAiC;AAC/B,iBAAKE,IAAL;AACD;AACF,SATkD,CAWnD;;;AACA,aAAKC,QAAL,CAAc;AACZX,UAAAA,UAAU,EAAEK,cAAc,GAAG,IAAH,GAAU,KADxB;AAEZJ,UAAAA,SAAS,EAAEb,qBAAqB,CAC9BkB,iBAAiB,CAACM,OAAlB,CAA0B,CAA1B,CAD8B,EAE9B,CAACR,gBAAD,CAF8B;AAFpB,SAAd;AAOD,OApBD;AAqBA,MAAA,SAAS,EAAE,CAACA,gBAAD,CArBX;AAAA,6BAuBA,QAAC,gBAAD;AACE,QAAA,GAAG,EAAE,KAAKN,KAAL,CAAWe,GADlB;AAEE,QAAA,GAAG,EAAE,KAAKX,MAFZ;AAGE,QAAA,OAAO,EAAE;AACPY,UAAAA,OAAO,EAAE,KADF;AAEPC,UAAAA,OAAO,EAAE;AAFF,SAHX;AAOE,QAAA,QAAQ,EAAE,CAACC,KAAD,EAAQR,SAAR,KAAsB,KAAKS,QAAL,CAAc,QAAd,EAAwBD,KAAxB,EAA+BR,SAA/B,CAPlC;AAQE,QAAA,OAAO,EAAGQ,KAAD,IAAW,KAAKC,QAAL,CAAc,OAAd,EAAuBD,KAAvB,CARtB;AASE,QAAA,MAAM,EAAGA,KAAD,IAAW,KAAKC,QAAL,CAAc,MAAd,EAAsBD,KAAtB;AATrB;AAAA;AAAA;AAAA;AAAA;AAvBA;AAAA;AAAA;AAAA;AAAA,YADJ;AAqCD;;AAEDP,EAAAA,KAAK,GAAG;AACN,SAAKP,MAAL,CAAYK,OAAZ,CAAoBE,KAApB;AACD;;AACDC,EAAAA,IAAI,GAAG;AACL,SAAKR,MAAL,CAAYK,OAAZ,CAAoBG,IAApB;AACD;;AACDQ,EAAAA,MAAM,GAAG;AACP,SAAKhB,MAAL,CAAYK,OAAZ,CAAoBW,MAApB;AACD;;AACDD,EAAAA,QAAQ,CAACE,KAAD,EAAQH,KAAR,EAAeR,SAAf,EAA0B;AAChCY,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAAmBH,KAAnB,EAA0BR,SAA1B;AACD;;AA/DuD","sourcesContent":["import React, { Component, createRef } from 'react';\nimport Observer from '@researchgate/react-intersection-observer';\nimport ReactFreezeframe from 'react-freezeframe';\n\nconst getPrintableThreshold = (ratio, range) =>\n  range.reduce((prev, curr) =>\n    Math.abs(curr - ratio) < Math.abs(prev - ratio) ? curr : prev);\n\nexport default class PlayGifWhenVisible extends Component {\n  state = {\n    visibility: null,\n    threshold: 0,\n  };\n\n  constructor(props) {\n    super(props);\n    this.freeze = createRef();\n  }\n\n  render() {\n    const desiredThreshold = this.props.threshold;\n    return (\n        <Observer\n        onChange={({ isIntersecting, intersectionRatio }) => {\n          if(isIntersecting){\n            if(this.freeze.current.isPlaying === false){\n              this.start();\n            }\n          } else {\n            if(this.freeze.current.isPlaying){\n              this.stop();\n            }\n          }\n\n          //unsure if this is required\n          this.setState({\n            visibility: isIntersecting ? true : false,\n            threshold: getPrintableThreshold(\n              intersectionRatio.toFixed(2),\n              [desiredThreshold],\n            ),\n          });\n        }}\n        threshold={[desiredThreshold]}\n      >\n        <ReactFreezeframe\n          src={this.props.src}\n          ref={this.freeze}\n          options={{\n            trigger: false,\n            overlay: true,\n          }}\n          onToggle={(items, isPlaying) => this.logEvent('toggle', items, isPlaying)}\n          onStart={(items) => this.logEvent('start', items)}\n          onStop={(items) => this.logEvent('stop', items)}\n        />\n      </Observer>\n    );\n  }\n\n  start() {\n    this.freeze.current.start();\n  }\n  stop() {\n    this.freeze.current.stop();\n  }\n  toggle() {\n    this.freeze.current.toggle();\n  }\n  logEvent(event, items, isPlaying) {\n    console.log(event, items, isPlaying);\n  }\n}"]},"metadata":{},"sourceType":"module"}