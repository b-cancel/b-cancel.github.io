"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeviceSelector = void 0;
var react_1 = __importStar(require("react"));
var DeviceFrameset_1 = require("./DeviceFrameset");
var DeviceOptions_1 = require("./DeviceOptions");
exports.DeviceSelector = react_1.default.memo(function DeviceSelector(_a) {
    var _b;
    var children = _a.children, value = _a.value, onChange = _a.onChange, _c = _a.banDevices, banDevices = _c === void 0 ? [] : _c, divProps = __rest(_a, ["children", "value", "onChange", "banDevices"]);
    var deviceNames = (0, react_1.useMemo)(function () { return DeviceOptions_1.DeviceNames.filter(function (devName) { return !banDevices.includes(devName); }); }, []);
    var _d = (0, react_1.useState)((_b = deviceNames[0]) !== null && _b !== void 0 ? _b : ''), deviceName = _d[0], setDeviceName = _d[1];
    var selectedDeviceName = (0, react_1.useMemo)(function () { return value !== null && value !== void 0 ? value : deviceName; }, [value, deviceName]);
    var handleSelectChange = (0, react_1.useCallback)(function (event) {
        var newDeviceName = event.currentTarget.dataset['deviceName'];
        if (!deviceNames.includes(newDeviceName))
            throw new Error("Invalid device name for " + newDeviceName);
        onChange === null || onChange === void 0 ? void 0 : onChange(newDeviceName);
        setDeviceName(newDeviceName);
    }, [deviceNames, onChange]);
    var _e = (0, react_1.useState)(true), showMenu = _e[0], setShowMenu = _e[1];
    var _f = (0, react_1.useMemo)(function () { return DeviceFrameset_1.DeviceOptions[selectedDeviceName]; }, [selectedDeviceName]), colors = _f.colors, hasLandscape = _f.hasLandscape, width = _f.width, height = _f.height;
    var firstColor = (0, react_1.useMemo)(function () { return colors[0]; }, [colors]);
    var _g = (0, react_1.useState)(firstColor), selectedColor = _g[0], setSelectedColor = _g[1];
    var handleColorChange = (0, react_1.useCallback)(function (event) {
        var newDeviceColor = event.currentTarget.dataset['deviceColor'];
        setSelectedColor(newDeviceColor);
    }, []);
    (0, react_1.useEffect)(function () { setSelectedColor(firstColor); }, [firstColor]);
    var _h = (0, react_1.useState)(undefined), isLandscape = _h[0], setIsLandscape = _h[1];
    var isLandscapeChecked = (0, react_1.useMemo)(function () { return hasLandscape ? isLandscape : undefined; }, [hasLandscape, isLandscape]);
    var handleIsLandscapeChange = (0, react_1.useCallback)(function () {
        if (!hasLandscape)
            return;
        setIsLandscape(function (is) { return !is; });
    }, [hasLandscape]);
    var deviceFramesetProps = (0, react_1.useMemo)(function () { return ({
        device: selectedDeviceName,
        color: selectedColor,
        landscape: isLandscapeChecked,
        width: width,
        height: height,
    }); }, [selectedDeviceName, selectedColor, isLandscapeChecked, width, height]);
    return (react_1.default.createElement("div", __assign({ className: "device-selector" }, divProps),
        react_1.default.createElement("dl", null,
            react_1.default.createElement("dt", null,
                react_1.default.createElement("p", null,
                    "The Chosen: ",
                    selectedDeviceName),
                react_1.default.createElement("span", { className: (showMenu ? 'active' : ''), onClick: function () { return setShowMenu(function (is) { return !is; }); } }, "show all devices")),
            showMenu && deviceNames.map(function (devName) { return (react_1.default.createElement("dd", { key: devName, "data-device-name": devName, onClick: handleSelectChange, className: devName === selectedDeviceName ? 'active' : '' },
                react_1.default.createElement("input", { type: "radio", id: devName }),
                react_1.default.createElement("label", { htmlFor: devName },
                    react_1.default.createElement("div", null,
                        react_1.default.createElement("p", null, devName),
                        DeviceFrameset_1.DeviceOptions[devName].hasLandscape && (react_1.default.createElement("span", { className: (devName === deviceName && isLandscape) ? 'active' : '', onClick: handleIsLandscapeChange }, "landscape"))),
                    react_1.default.createElement("ul", null, DeviceFrameset_1.DeviceOptions[devName].colors.map(function (color) { return (react_1.default.createElement("li", { key: color, title: color, "data-device-color": color, onClick: handleColorChange, className: [((devName === deviceName && color === selectedColor) ? 'active' : ''), color].join(' ') })); }))))); })),
        react_1.default.createElement("div", { className: "device-selector-container" }, children(deviceFramesetProps))));
});
