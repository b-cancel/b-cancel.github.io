/// <reference types="react" />
import type { Compute, OptionField, OmitFieldByType } from './helper';
declare type DeviceType<Device extends string, Colors extends readonly string[]> = {
    device: Device;
    colors: Colors;
    hasLandscape: boolean;
    width?: number;
    height?: number;
};
export declare const defineDevice: <Device extends string, Colors extends readonly string[], Def extends DeviceType<Device, Colors>>(definition: Def) => Def;
export declare const DeviceOptions: {
    "iPhone X": {
        device: "iphone-x";
        colors: readonly [];
        hasLandscape: true;
        width: number;
        height: number;
    };
    "iPhone 8": {
        device: "iphone8";
        colors: readonly ["black", "silver", "gold"];
        hasLandscape: true;
        width: number;
        height: number;
    };
    "iPhone 8 Plus": {
        device: "iphone8plus";
        colors: readonly ["black", "silver", "gold"];
        hasLandscape: true;
        width: number;
        height: number;
    };
    "iPhone 5s": {
        device: "iphone5s";
        colors: readonly ["black", "silver", "gold"];
        hasLandscape: true;
        width: number;
        height: number;
    };
    "iPhone 5c": {
        device: "iphone5c";
        colors: readonly ["white", "red", "yellow", "green", "blue"];
        hasLandscape: true;
        width: number;
        height: number;
    };
    "iPhone 4s": {
        device: "iphone4s";
        colors: readonly ["black", "silver"];
        hasLandscape: true;
        width: number;
        height: number;
    };
    "Galaxy Note 8": {
        device: "note8";
        colors: readonly [];
        hasLandscape: true;
        width: number;
        height: number;
    };
    "Nexus 5": {
        device: "nexus5";
        colors: readonly [];
        hasLandscape: true;
        width: number;
        height: number;
    };
    "Lumia 920": {
        device: "lumia920";
        colors: readonly ["black", "white", "yellow", "red", "blue"];
        hasLandscape: true;
        width: number;
        height: number;
    };
    "Samsung Galaxy S5": {
        device: "s5";
        colors: readonly ["white", "black"];
        hasLandscape: true;
        width: number;
        height: number;
    };
    "HTC One": {
        device: "nexus5";
        colors: readonly [];
        hasLandscape: true;
        width: number;
        height: number;
    };
    "iPad Mini": {
        device: "ipad";
        colors: readonly ["black", "silver"];
        hasLandscape: true;
        width: number;
        height: number;
    };
    "MacBook Pro": {
        device: "macbook";
        colors: readonly [];
        hasLandscape: false;
        width: number;
        height: number;
    };
};
export declare type DeviceName = keyof typeof DeviceOptions;
export declare const DeviceNames: ("iPhone X" | "iPhone 8" | "iPhone 8 Plus" | "iPhone 5s" | "iPhone 5c" | "iPhone 4s" | "Galaxy Note 8" | "Nexus 5" | "Lumia 920" | "Samsung Galaxy S5" | "HTC One" | "iPad Mini" | "MacBook Pro")[];
declare type DevicesType<R extends Record<string, DeviceType<string, readonly string[]>>> = {
    [key in keyof R]: Compute<OptionField<OmitFieldByType<{
        device: key;
        color: R[key]['colors'][number];
        landscape: R[key]['hasLandscape'] extends true ? (boolean | undefined) : never;
        width?: number;
        height?: number;
        zoom?: number;
    }, never>>>;
}[keyof R];
export declare type DeviceFramesetProps = DevicesType<typeof DeviceOptions> & React.HTMLAttributes<HTMLDivElement>;
export {};
